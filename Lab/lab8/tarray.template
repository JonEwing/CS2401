/*************************************************************
    Lab8		CS2401		Spring 2017
    Jonathan Feige
    template for template array
**************************************************************/

#include<cstdlib>
#include<iostream>

using namespace std;

template<class T>
Tarray<T>::Tarray()
{
	capacity = 5;
	used = 0;
	current_index = 0;
}

template<class T>
void Tarray<T>::add(T item)
{
	if(used==capacity-1)
	{
	resize();
	}
	data[used]=item;
	used++;
}

template<class T>
void Tarray<T>::start()
{
	current_index = 0;
}

template<class T>
bool Tarray<T>::is_item()const
{
	return current_index < used;
}

template<class T>
void Tarray<T>::advance()
{
	current_index++;
}

template<class T>
T Tarray<T>:: current()const
{
	return data[current_index];
}

template<class T>
void Tarray<T>::remove_current()
{
	data[current_index] = data[used];
	used--;
}

template<class T>
void Tarray<T>::resize()
{
		T *tmp;
		capacity = capacity + 5;
		tmp = new T[capacity];
		for(int i=0; i< used; i++)
		{
		tmp[i] = data[i];
		}
		data = tmp;
}